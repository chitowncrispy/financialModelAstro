---
import FinanceLayout from "../layouts/FinanceLayout.astro";
   
const requestURL = Astro.request.url;
const queryParamString = requestURL.substring(requestURL.indexOf('?') + 1);
const queryParams = queryParamString.split('&');
console.log(queryParamString);
console.log(queryParams);

const queryParamsMap = new Map<string, string>();

queryParams.forEach((queryParam) => {
   const keyValue = queryParam.split("=");
   queryParamsMap.set(keyValue[0], keyValue[1]);
})

console.log(queryParamsMap);

const startingAmount = Number(queryParamsMap.get("startingAmount"));
const numberOfYears = Number(queryParamsMap.get("numberOfYears"));
const annualGrowthRateStockMarketAccount = Number(queryParamsMap.get("annualGrowthRatePercentage"));
const annualGrowthRateSafeMoneyOption = Number(queryParamsMap.get("annualGrowthRatePercentage"));
const yearsUntilAnnualWithdrawals = Number(queryParamsMap.get("yearsUntilWithdrawl"));
const percentageDrawdownInWithdrawalYear = Number(queryParamsMap.get("percentBalanceAnnualWithdrawal"));
const marketCrash1Year = Number(queryParamsMap.get("yearsToMarketCrash1"));
const percentageDrawdownMarketCrash1 = Number(queryParamsMap.get("percentFirstMarketCrash"));
const marketCrash2Year = Number(queryParamsMap.get("yearsToMarketCrash2"));
const percentageDrawdownMarketCrash2 = Number(queryParamsMap.get("percentSecondMarketCrash"));

console.log(startingAmount);
console.log(numberOfYears);
console.log(annualGrowthRateStockMarketAccount);
console.log(annualGrowthRateSafeMoneyOption);
console.log(yearsUntilAnnualWithdrawals);
console.log(percentageDrawdownInWithdrawalYear);
console.log(marketCrash1Year);
console.log(percentageDrawdownMarketCrash1);
console.log(marketCrash2Year);
console.log(percentageDrawdownMarketCrash2);

function calculateYearlyValuesStockMarketAccount(startingAmount: number, numberOfYears: number, annualGrowthRateStockMarketAccount: number, yearsUntilAnnualWithdrawals: number, percentageDrawdownInWithdrawalYear: number, marketCrash1Year: number, percentageDrawdownMarketCrash1: number, marketCrash2Year: number, percentageDrawdownMarketCrash2: number) {
  const initialInvestment = startingAmount;
  let yearlyValues = [];

  for (let i = 0; i <= numberOfYears; i++) {
    if (i == 0) {
      yearlyValues.push({ 'year': i, 'value': initialInvestment, 'percentChange': 0 });
      // saveToSessionStorage('yearlyValuesStockMarketAccount', i, initialInvestment, 0);
    } else {
      let calculatedGrowthRate = annualGrowthRateStockMarketAccount;
      if (i == marketCrash1Year) {
        calculatedGrowthRate = -percentageDrawdownMarketCrash1;
      }
      if (i == marketCrash2Year) {
        calculatedGrowthRate = -percentageDrawdownMarketCrash2
      }
      if (i >= yearsUntilAnnualWithdrawals) {
        calculatedGrowthRate -= percentageDrawdownInWithdrawalYear;
      }

      let previousYearlyTotal = yearlyValues[i - 1].value;
      const currentYearTotal = Math.round(previousYearlyTotal += previousYearlyTotal * calculatedGrowthRate);
      yearlyValues.push({ 'year': i, 'value': currentYearTotal, 'percentChange': calculatedGrowthRate });
    }
  }

  return yearlyValues;
}

function calculateYearlyValuesSafeMoneyOption(startingAmount: number, numberOfYears: number, annualGrowthRate: number, yearsUntilAnnualWithdrawals: number, percentageDrawdownInWithdrawalYear: number, marketCrash1Year: number, marketCrash2Year: number) {
  const initialInvestment = startingAmount;
  let yearlyValues = [];

  for (let i = 0; i <= numberOfYears; i++) {
    if (i == 0) {
      yearlyValues.push({ 'year': i, 'value': initialInvestment, 'percentChange': 0 });
    } else {
      let calculatedGrowthRate = annualGrowthRate;
      if (i == marketCrash1Year || i == marketCrash2Year) {
        calculatedGrowthRate = 0;
      }
      if (i >= yearsUntilAnnualWithdrawals) {
        calculatedGrowthRate -= percentageDrawdownInWithdrawalYear;
      }

      let previousYearlyTotal = yearlyValues[i - 1].value;
      const currentYearTotal = Math.round(previousYearlyTotal += previousYearlyTotal * calculatedGrowthRate);
      yearlyValues.push({ 'year': i, 'value': currentYearTotal, 'percentChange': calculatedGrowthRate });
    }
  }

  return yearlyValues;
}

const yearlyValuesStockMarketAccount = calculateYearlyValuesStockMarketAccount(startingAmount, numberOfYears, annualGrowthRateStockMarketAccount, yearsUntilAnnualWithdrawals, percentageDrawdownInWithdrawalYear, marketCrash1Year, percentageDrawdownMarketCrash1, marketCrash2Year, percentageDrawdownMarketCrash2);
const yearlyValuesSafeMoneyOption = calculateYearlyValuesSafeMoneyOption(startingAmount, numberOfYears, annualGrowthRateSafeMoneyOption, yearsUntilAnnualWithdrawals, percentageDrawdownInWithdrawalYear, marketCrash1Year, marketCrash2Year);
---

<FinanceLayout title="Crispy Financial Group" leftContainerHeader="Yearly Values">
   <div  slot="yearlyValues">
      <p>{yearlyValuesStockMarketAccount}</p>
   </div>
</FinanceLayout>

<style>
   .hiddenElements {
      display: none;
   }
</style>
